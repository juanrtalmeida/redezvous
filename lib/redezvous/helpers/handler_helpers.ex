defmodule Redezvous.Helpers.HandlerHelpers do
  @moduledoc false
  alias Redezvous.Helpers.ChangesetHelpers

  @doc """
  This function is responsible for handling the insertion of a new record
  into the database. It uses the changeset generated by the `changeset/2`
  function to handle validation and error messages.

  ## Examples

      iex> handle_insertion({:ok, inserted_result}, "User not created")
      {:ok, inserted_result}

      iex> handle_insertion({:error, changeset}, "User not created")
      {:error, %{message: "User not created", errors: %{name: "can't be blank"}}}

      iex> handle_insertion(nil, "User not found")
      {:error, %{message: "User not found"}}

  ## Returns

      {:ok, inserted_result} | {:error, %{message: String.t(), errors: map()}}

  ## Parameters

      - result: The result of the insertion operation.
      - message: The message to be returned if the insertion fails.
  """
  @spec handle_insertion({:ok, struct()} | {:error, Ecto.Changeset.t()}, String.t()) :: {:ok, any()} | {:error, map()}
  def handle_insertion(result = {:ok, _inserted_result}, _), do: result

  def handle_insertion({:error, changeset = %Ecto.Changeset{}}, message),
    do:
      {:error,
       %{
         message: message,
         errors: changeset |> ChangesetHelpers.convert_changeset_erros_to_json()
       }}

  @doc """
  This function is responsible for handling the search of a record in the database.

  ## Examples

      iex> handle_search( %User{})
      {:ok, %User{}}

      iex> handle_search(nil)
      {:error, message: "Not found"}
  """
  @spec handle_search(dynamic() | nil) :: {:ok, dynamic()} | {:error, message: String.t()}
  def handle_search(result) when result === nil, do: {:ok, message: "Not found"}
  def handle_search(result), do: {:ok, result}
end
